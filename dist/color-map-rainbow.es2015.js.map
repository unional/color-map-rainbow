{"version":3,"file":"color-map-rainbow.es2015.js","sources":["../node_modules/color-map/ts/createColors.ts","../node_modules/color-map/ts/createColorsFromMap.ts","../ts/index.ts"],"sourcesContent":["import { RGB, RGBA, Alpha } from './interfaces'\n\nexport function createColors(\n  from: RGB | RGBA,\n  to: RGB | RGBA,\n  shades: number,\n  alpha: Alpha = [\n    from.length === 4 ? from[3] : to.length === 4 ? to[3] : 1,\n    to.length === 4 ? to[3] : from.length === 4 ? from[3] : 1\n  ]): RGBA[] {\n  const start = [...from]\n  const diff = [\n    to[0] - from[0],\n    to[1] - from[1],\n    to[2] - from[2],\n    alpha[1] - alpha[0]\n  ]\n\n  if (start.length === 3)\n    start.push(alpha[0])\n\n  const inc = 1 / Math.max(shades - 1, 1)\n\n  const rgba: any[] = []\n  for (let i = 0; i < shades; i++) {\n    const color = [\n      Math.round(start[0] + i * diff[0] * inc),\n      Math.round(start[1] + i * diff[1] * inc),\n      Math.round(start[2] + i * diff[2] * inc),\n      start[3] + i * diff[3] * inc\n    ]\n    rgba.push(color)\n  }\n  return rgba\n}\n","import { createColors } from './createColors'\nimport { ColorMap, Alpha, RGBA } from './interfaces'\n\n/**\n * Create colors with specified color map.\n */\nexport function createColorsFromMap(colormap: ColorMap, shades: number, alpha?: Alpha): RGBA[] {\n  if (shades < colormap.length) {\n    throw new Error(`Requires at least ${colormap.length} shades.`)\n  }\n\n  const result: RGBA[] = []\n  const steps: number[] = []\n  for (let i = 0; i < colormap.length; i++) {\n    steps.push(Math.round(colormap[i].index * shades))\n  }\n\n  for (let i = 0; i < colormap.length - 1; i++) {\n    const n = steps[i + 1] - steps[i]\n    const from = colormap[i].rgb;\n    const to = colormap[i + 1].rgb;\n    result.push(...createColors(from, to, n, alpha))\n  }\n\n  return result\n}\n","import { createColorsFromMap, ColorMap, Alpha } from 'color-map'\n\nexport const rainbow: ColorMap = [\n  { index: 0, rgb: [150, 0, 90] },\n  { index: 0.125, rgb: [0, 0, 200] },\n  { index: 0.25, rgb: [0, 25, 255] },\n  { index: 0.375, rgb: [0, 152, 255] },\n  { index: 0.5, rgb: [44, 255, 150] },\n  { index: 0.625, rgb: [151, 255, 0] },\n  { index: 0.75, rgb: [255, 234, 0] },\n  { index: 0.875, rgb: [255, 111, 0] },\n  { index: 1, rgb: [255, 0, 0] }\n]\n\n/**\n * Create rainbow of colors\n * @returns array of [r,g,b,a]\n */\nexport function createRainbow(shades: number, alpha?: Alpha) {\n  return createColorsFromMap(rainbow, shades, alpha)\n}\n"],"names":[],"mappings":"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"}